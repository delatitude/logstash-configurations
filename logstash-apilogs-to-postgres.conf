# This pipeline transfers api logs from csv files to postgres database
#./logstash -f "E:\logstash-configs\logstash-apilogs-to-postgres.conf"

input {
	file {
		path => "E:/Documents/API Management/azure-storage-backup/tblApimTraLog/*.csv"
		#path => "E:/SP-Documents/API Management/logstrash-test/*.csv"
		#path => "E:/SP-Documents/API Management/logstrash-test/old/test.csv"
		start_position => "beginning"
		sincedb_path => "nul"
	}
}

filter {
    # Add filter here. This sample has a blank filter.
	csv { 
		columns => ["PartitionKey","RowKey","Timestamp","apiName","bIsHasAddress","endTimestamp","error","httpMethod","ipAddress","operationName","productId","productName","request","requestHost","requestId","requestUrl","response","serviceName","startTimestamp","statusCode","subscriptionId","userEmail","userId"] 
		separator => "," 
		skip_header => "true"
	} 	
  geoip {
    source => "ipAddress"
		database => "E:/logstash-configs/assets/GeoLite2-City_20190430/GeoLite2-City.mmdb"
    target => "geoip"
    add_field => [ "country", "%{[geoip][country_name]}" ]
    add_field => [ "city", "%{[geoip][city_name]}"  ]
		add_field => [ "latitude", "%{[geoip][location][lat]}"  ]
		add_field => [ "longitude", "%{[geoip][location][lon]}"  ]
		#fields => [ "city_name", "country_name", "continent_code", "country_code2", "location" ]
		#remove_field => [ "[geoip]" ]
  }

	if ![geoip][city_name] {
			mutate { 
				replace => [ "city", "Unknown" ]
			}		
	}

	mutate {
		split => ["apiName", "."]
		add_field => { "apiName2" => "%{[apiName][1]}" }					
	}

	mutate { 
		remove_field => [ "[geoip]" ]
		rename => ["apiName2", "apiName" ]
	}

}

output {
	jdbc {
				connection_string => 'jdbc:postgresql://rhgisp-web001:5432/APIManagement?user=logstash&password=xxxx'     
				statement => [ "INSERT INTO apiusage (rowkey,LogInsertTime,apiname,bishasaddress,operationname,productid,productname,requestid,statuscode,subscriptionid,useremail,userid,country,city,latitude,longitude) VALUES (?,CAST(? AS TIMESTAMPTZ),?,CAST(? AS BOOLEAN),?,?,?,?,CAST(? AS SMALLINT),?,?,?,?,?,CAST(? as DOUBLE PRECISION),CAST(? as DOUBLE PRECISION))"		                                    
											,'%{RowKey}'
											,'%{Timestamp}'
											,'%{apiName}'
											,'%{bIsHasAddress}'
											,'%{operationName}'
											,'%{productId}'
											,'%{productName}'
											,'%{requestId}'
											,'%{statusCode}'
											,'%{subscriptionId}'
											,'%{userEmail}'
											,'%{userId}'
											,'%{country}'											                        
											,'%{city}'
											,'%{latitude}'
											,'%{longitude}'
										]                				
				
				# statement => [ "INSERT INTO apilog (rowkey,timestamp,apiname,bishasaddress,starttimestamp,endtimestamp,error,httpmethod,ipaddress,operationname,productid,productname,request,requesthost,requestid,requesturl,response,servicename,statuscode,subscriptionid,useremail,userid,country,city,latitude,longitude) VALUES (?,CAST(? AS TIMESTAMPTZ),?,CAST(? AS BOOLEAN),CAST(? AS TIMESTAMPTZ),CAST(? AS TIMESTAMPTZ),?,?,?,?,?,?,?,?,?,?,?,?,CAST(? AS SMALLINT),?,?,?,?,?,CAST(? as DOUBLE PRECISION),CAST(? as DOUBLE PRECISION))"		                                    
				# 							,'%{RowKey}'
				# 							,'%{Timestamp}'
				# 							,'%{apiName}'
				# 							,'%{bIsHasAddress}'
				# 							,'%{startTimestamp}'
				# 							,'%{endTimestamp}'
				# 							,'%{error}'
				# 							,'%{httpMethod}'
				# 							,'%{ipAddress}'
				# 							,'%{operationName}'
				# 							,'%{productId}'
				# 							,'%{productName}'
				# 							,'%{request}'
				# 							,'%{requestHost}'
				# 							,'%{requestId}'
				# 							,'%{requestUrl}'
				# 							,'%{response}'
				# 							,'%{serviceName}'
				# 							,'%{statusCode}'
				# 							,'%{subscriptionId}'
				# 							,'%{userEmail}'
				# 							,'%{userId}'
				# 							,'%{country}'											                        
				# 							,'%{city}'
				# 							,'%{latitude}'
				# 							,'%{longitude}'
				# 						]                
	}      
	#stdout { codec => rubydebug }
}