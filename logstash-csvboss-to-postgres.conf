# This pipeline transfers api logs from csv files to postgres database
#./logstash -f "E:\logstash-configs\logstash-csvboss-to-postgres.conf"

input {
	file {
		path => "E:/SP-Documents/IndAddresses2.csv"
		#path => "E:/SP-Documents/API Management/logstrash-test/*.csv"
		#path => "E:/SP-Documents/API Management/logstrash-test/old/test.csv"
		start_position => "beginning"
		sincedb_path => "nul"
	}
}

filter {
    # Add filter here. This sample has a blank filter.
	csv { 
		columns => ["AccountNumber","custom_building","custom_additionalnumber","custom_Zipcode","alixis_StreetNameAR","alixis_StreetNameEN","alixis_DistrictNameAR","alixis_DistrictNameEN","custom_CityName","custom_regionName","UnitType","custom_unitnumber","OccupationMode","Relationship","PIDType","fullName","alixis_FirstName","alixis_secondname","alixis_thirdname","alixis_LastName","alixis_FullNameEnglish","alixis_FirstNameEnglish","alixis_SecondNameEnglish","alixis_ThirdNameEnglish","alixis_LastNameEnglish","alixis_PID","alixis_PIDIssueDate","alixis_PIDExpiryDateHijri","alixis_idissueplace","alixis_birthdate_hijri","alixis_PlaceofBirth","alixis_NationalityName","gender","mobileNo","Email","Occupation","alixis_SponsorID","alixis_SponsorName","alixis_physicallychallenged","CreatedOn"] 
		separator => "," 
		skip_header => "true"
	}

	# if [custom_building] == "NULL" or [custom_building] == "null" or [custom_building] == ""  {
	# 	ruby {
	# 		code => "event.set('custom_building', 0)"
	# 	}
	# } 

	# if [custom_additionalnumber] == "NULL" or [custom_additionalnumber] == "null" or [custom_additionalnumber] == ""  {
	# 	ruby {
	# 		code => "event.set('custom_additionalnumber', 0)"
	# 	}
	# } 	 

	# if [custom_Zipcode] == "NULL" or [custom_Zipcode] == "null" or [custom_Zipcode] == ""  {
    #      ruby {
    #          code => "event.set('custom_Zipcode', 0)"
    #      }
	# } 	 



	# if [alixis_PIDIssueDate] == "NULL" or [alixis_PIDIssueDate] == "null" or [alixis_PIDIssueDate] == ""  {
    #     ruby {
    #         code => "event.set('alixis_PIDIssueDate', event.get('@timestamp'))"
    #     }
	# } 

	# if [alixis_PIDExpiryDateHijri] == "0//" or [alixis_PIDExpiryDateHijri] == "0" or [alixis_PIDExpiryDateHijri] == "null" or [alixis_PIDExpiryDateHijri] == "NULL" or [alixis_PIDExpiryDateHijri] == "" {
    #     ruby {
    #         code => "event.set('alixis_PIDExpiryDateHijri', event.get('@timestamp'))"
    #     }
	# } 

	# if [alixis_birthdate_hijri] == "0//" or [alixis_birthdate_hijri] == "0" or [alixis_birthdate_hijri] == "null" or [alixis_birthdate_hijri] == "NULL" or [alixis_birthdate_hijri] == "" {
    #     ruby {
    #         code => "event.set('alixis_birthdate_hijri', event.get('@timestamp'))"
    #     }
	# } 

# alixis_PIDIssueDate
# alixis_PIDExpiryDateHijri
# alixis_birthdate_hijri
# CreatedOn

}



output {
	jdbc {
				connection_string => 'jdbc:postgresql://db-server:5432/BOSS?user=logstash&password=xxxx'     
				#statement => [ "INSERT INTO person (AccountNumber,custom_building,custom_additionalnumber,custom_Zipcode,alixis_StreetNameAR,alixis_StreetNameEN,alixis_DistrictNameAR,alixis_DistrictNameEN,custom_CityName,custom_regionName,UnitType,custom_unitnumber,OccupationMode,Relationship,PIDType,fullName,alixis_FirstName,alixis_secondname,alixis_thirdname,alixis_LastName,alixis_FullNameEnglish,alixis_FirstNameEnglish,alixis_SecondNameEnglish,alixis_ThirdNameEnglish,alixis_LastNameEnglish,alixis_PID,alixis_PIDIssueDate,alixis_PIDExpiryDateHijri,alixis_idissueplace,alixis_birthdate_hijri,alixis_PlaceofBirth,alixis_NationalityName,gender,mobileNo,Email,Occupation,alixis_SponsorID,alixis_SponsorName,alixis_physicallychallenged,CreatedOn) VALUES (?,CAST(? AS SMALLINT),CAST(? AS SMALLINT),CAST(? AS INT),?,?,?,?,?,?,?,CAST(? AS SMALLINT),?,?,?,?,?,?,?,?,?,?,?,?,?,?,CAST(? AS TIMESTAMPTZ),CAST(? AS TIMESTAMPTZ),?,CAST(? AS TIMESTAMP),?,?,?,?,?,?,?,?,?,CAST(? AS TIMESTAMPTZ))"
				#statement => [ "INSERT INTO person1 (AccountNumber,custom_building,custom_additionalnumber,custom_Zipcode,alixis_StreetNameAR,alixis_StreetNameEN,alixis_DistrictNameAR,alixis_DistrictNameEN,custom_CityName,custom_regionName,UnitType,custom_unitnumber,OccupationMode,Relationship,PIDType,fullName,alixis_FirstName,alixis_secondname,alixis_thirdname,alixis_LastName,alixis_FullNameEnglish,alixis_FirstNameEnglish,alixis_SecondNameEnglish,alixis_ThirdNameEnglish,alixis_LastNameEnglish,alixis_PID,alixis_PIDIssueDate,alixis_PIDExpiryDateHijri,alixis_idissueplace,alixis_birthdate_hijri,alixis_PlaceofBirth,alixis_NationalityName,gender,mobileNo,Email,Occupation,alixis_SponsorID,alixis_SponsorName,alixis_physicallychallenged,CreatedOn) VALUES (?,CAST(? AS SMALLINT),CAST(? AS SMALLINT),CAST(? AS INT),?,?,?,?,?,?,?,CAST(? AS SMALLINT),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,CAST(? AS TIMESTAMPTZ))"				
				statement => [ "INSERT INTO person1 (AccountNumber,custom_building,custom_additionalnumber,custom_Zipcode,alixis_StreetNameAR,alixis_StreetNameEN,alixis_DistrictNameAR,alixis_DistrictNameEN,custom_CityName,custom_regionName,UnitType,custom_unitnumber,OccupationMode,Relationship,PIDType,fullName,alixis_FirstName,alixis_secondname,alixis_thirdname,alixis_LastName,alixis_FullNameEnglish,alixis_FirstNameEnglish,alixis_SecondNameEnglish,alixis_ThirdNameEnglish,alixis_LastNameEnglish,alixis_PID,alixis_PIDIssueDate,alixis_PIDExpiryDateHijri,alixis_idissueplace,alixis_birthdate_hijri,alixis_PlaceofBirth,alixis_NationalityName,gender,mobileNo,Email,Occupation,alixis_SponsorID,alixis_SponsorName,alixis_physicallychallenged,CreatedOn) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,CAST(? AS TIMESTAMPTZ))"		
											,'%{AccountNumber}'
											,'%{custom_building}'
											,'%{custom_additionalnumber}'
											,'%{custom_Zipcode}'
											,'%{alixis_StreetNameAR}'
											,'%{alixis_StreetNameEN}'
											,'%{alixis_DistrictNameAR}'
											,'%{alixis_DistrictNameEN}'
											,'%{custom_CityName}'
											,'%{custom_regionName}'
											,'%{UnitType}'
											,'%{custom_unitnumber}'
											,'%{OccupationMode}'
											,'%{Relationship}'
											,'%{PIDType}'
											,'%{fullName}'
											,'%{alixis_FirstName}'
											,'%{alixis_secondname}'
											,'%{alixis_thirdname}'
											,'%{alixis_LastName}'
											,'%{alixis_FullNameEnglish}'
											,'%{alixis_FirstNameEnglish}'
											,'%{alixis_SecondNameEnglish}'
											,'%{alixis_ThirdNameEnglish}'
											,'%{alixis_LastNameEnglish}'
											,'%{alixis_PID}'
											,'%{alixis_PIDIssueDate}'
											,'%{alixis_PIDExpiryDateHijri}'
											,'%{alixis_idissueplace}'
											,'%{alixis_birthdate_hijri}'
											,'%{alixis_PlaceofBirth}'
											,'%{alixis_NationalityName}'
											,'%{gender}'
											,'%{mobileNo}'
											,'%{Email}'
											,'%{Occupation}'
											,'%{alixis_SponsorID}'
											,'%{alixis_SponsorName}'
											,'%{alixis_physicallychallenged}'
											,'%{CreatedOn}'
										]                				
				
				# statement => [ "INSERT INTO person (AccountNumber ,custom_building    ,custom_additionalnumber,custom_Zipcode     ,alixis_StreetNameAR,alixis_StreetNameEN,alixis_DistrictNameAR,alixis_DistrictNameEN,custom_CityName,custom_regionName,UnitType,custom_unitnumber  ,OccupationMode,Relationship,PIDType,fullName,alixis_FirstName,alixis_secondname,alixis_thirdname,alixis_LastName,alixis_FullNameEnglish,alixis_FirstNameEnglish,alixis_SecondNameEnglish,alixis_ThirdNameEnglish,alixis_LastNameEnglish,alixis_PID,alixis_PIDIssueDate   ,alixis_PIDExpiryDateHijri,alixis_idissueplace,alixis_birthdate_hijri,alixis_PlaceofBirth,alixis_NationalityName,gender,mobileNo,Email,Occupation,alixis_SponsorID,alixis_SponsorName,alixis_physicallychallenged,CreatedOn) VALUES 
				# 								   (CAST(? AS INT),CAST(? AS SMALLINT),CAST(? AS SMALLINT)    ,CAST(? AS SMALLINT),                  ?,                  ?,                    ?,                    ?,              ?,                ?,       ?,CAST(? AS SMALLINT),			   ?,			?,      ?,       ?,               ?,                ?,               ?,              ?,                     ?,                      ?,                       ?,                      ?,                     ?,         ?,CAST(? AS TIMESTAMPTZ),CAST(? AS TIMESTAMPTZ)   ,                  ?,CAST(? AS TIMESTAMPTZ),                  ?,                     ?,     ?,       ?,    ?,         ?,               ?,                  ?,                         ?,CAST(? AS TIMESTAMPTZ)        
	}      
	#stdout { codec => rubydebug }
}